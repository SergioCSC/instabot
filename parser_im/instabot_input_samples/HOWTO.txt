Данные, которые подаются на вход нейросети:



1. формируем список логинов аккаунтов, про которые хотим определить, являются они людьми, ботами или бизнес аккаунтами.



2. Парсим инстаграм с помощью обращения к parsim.im (у меня будет скрипт, который это делает)

2.1. Создаём задание на парсинг аккаунтов (фильтрация аккаунтов): отправляем GET запрос вида

https://parser.im/api.php?key=$auth&name=$name&mode=create&type=f1&web=0&act=1&spec=1%2C2&dop=12&links=$acc1%2C$acc2%2C$acc3

где 
$auth -- ключ авторизации на parsim.im
$name -- имя задания
$acc1, $acc2, ..., $accn -- логины пользователей



2.2. Создаём задание на парсинг постов с этих аккаунтов: отправляем GET запрос вида

https://parser.im/api.php?key=$auth&name=$name&mode=create&type=p1&web=0&act=6&spec=4%2C8%2C9&links=$acc1%2C$acc2%2C$acc3

где 
$auth -- ключ авторизации на parsim.im
$name -- имя задания
$acc1, $acc2, ..., $accn -- логины пользователей



2.3 Ждём, пока задания выполнятся и собираем результаты их выполнения.

2.3.1 Результат парсинга аккаунтов имеет вид, описанный в папке \instabot_input_samples в файле template_accounts.txt. Пример аккаунтов, спаршенных в этом формате, представлен файле sample_accounts.txt. Какие-то из указанных параметров могут отстутствовать в реальных данных, это нормально.

2.3.2 Результат парсинга постов имеет вид, описанный в файле template_posts.txt. Пример постов, спаршенных в этом формате, представлен в файле sample_posts.txt



3. Подаём эти два файла (спаршенных аккаунтов и спаршенных постов) на вход скрипта (его пока нет), который объединит посты с соответствующими им аккаунтами и приведёт к формату Марата, а потом отправит на вход нейросети. Формат Марата представлен в файлах

template_accounts_and_posts_in_Marat_format.json и sample_accounts_and_posts_in_Marat_format.json

. Какие-то из указанных параметров могут отсутствовать в реальных данных, это нормально.